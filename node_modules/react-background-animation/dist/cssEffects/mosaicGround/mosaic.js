"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _jquery = _interopRequireDefault(require("jquery"));

var _mosaicStyled = require("./mosaicStyled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MosaicGround =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(MosaicGround, _PureComponent);

  function MosaicGround(props) {
    var _this;

    _classCallCheck(this, MosaicGround);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MosaicGround).call(this, props));
    _this.excuteEffect = _this.excuteEffect.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(MosaicGround, [{
    key: "excuteEffect",
    value: function excuteEffect() {
      (function () {
        var Photo, addListeners, canvas, createGrid, ctx, gridItem, grids, height, img, imgInfo, imgSrc, imgs, init, magnet, mouse, populateCanvas, _render, resizeCanvas, rotateAndPaintImage, updateMouse, useGrid, width;

        canvas = document.getElementById('canvas');
        ctx = canvas.getContext('2d');
        width = canvas.width = window.innerWidth;
        height = canvas.height = window.innerHeight;
        imgSrc = canvas.dataset.image;
        img = new Image();
        useGrid = true;
        imgInfo = {};
        imgs = [];
        grids = [];
        magnet = 2000;
        mouse = {
          x: 1,
          y: 0
        };

        init = function init() {
          addListeners();

          img.onload = function (e) {
            var numberToShow; // Check for firefox. 

            imgInfo.width = e.path ? e.path[0].width : e.target.width;
            imgInfo.height = e.path ? e.path[0].height : e.target.height;
            numberToShow = Math.ceil(window.innerWidth / imgInfo.width) * Math.ceil(window.innerHeight / imgInfo.height);

            if (useGrid) {
              createGrid();
            }

            populateCanvas(numberToShow * 4);
            canvas.classList.add('ready');
            return _render();
          };

          return img.src = imgSrc;
        };

        addListeners = function addListeners() {
          window.addEventListener('resize', resizeCanvas);
          window.addEventListener('mousemove', updateMouse);
          return window.addEventListener('touchmove', updateMouse);
        };

        updateMouse = function updateMouse(e) {
          mouse.x = e.clientX;
          return mouse.y = e.clientY;
        };

        resizeCanvas = function resizeCanvas() {
          width = canvas.width = window.innerWidth;
          return height = canvas.height = window.innerHeight;
        };

        populateCanvas = function populateCanvas(nb) {
          var i, p, results;
          i = 0;
          results = [];

          while (i <= nb) {
            p = new Photo();
            imgs.push(p);
            results.push(i++);
          }

          return results;
        };

        createGrid = function createGrid() {
          var c, grid, i, imgScale, item, j, k, l, r, ref, ref1, ref2, results, x, y;
          imgScale = 0.5;
          grid = {
            row: Math.ceil(window.innerWidth / (imgInfo.width * imgScale)),
            cols: Math.ceil(window.innerHeight / (imgInfo.height * imgScale)),
            rowWidth: imgInfo.width * imgScale,
            colHeight: imgInfo.height * imgScale
          };

          for (r = j = 0, ref = grid.row; 0 <= ref ? j < ref : j > ref; r = 0 <= ref ? ++j : --j) {
            x = r * grid.rowWidth;

            for (c = k = 0, ref1 = grid.cols; 0 <= ref1 ? k < ref1 : k > ref1; c = 0 <= ref1 ? ++k : --k) {
              y = c * grid.colHeight;
              item = new gridItem(x, y, grid.rowWidth, grid.colHeight);
              grids.push(item);
            }
          }

          results = [];

          for (i = l = 0, ref2 = grids.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
            results.push(grids[i].draw());
          }

          return results;
        };

        gridItem = function gridItem() {
          var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
          var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
          var w = arguments.length > 2 ? arguments[2] : undefined;
          var h = arguments.length > 3 ? arguments[3] : undefined;

          this.draw = function () {
            ctx.drawImage(img, x, y, w, h);
          };
        };

        Photo = function Photo() {
          var TO_RADIANS, finalX, finalY, forceX, forceY, h, r, seed, w, x, y;
          seed = Math.random() * (2.5 - 0.7) + 0.7;
          w = imgInfo.width / seed;
          h = imgInfo.height / seed;
          x = window.innerWidth * Math.random();
          finalX = x;
          y = window.innerHeight * Math.random();
          finalY = y;
          console.log("INIT Y :: ".concat(finalY, " || INIT X :: ").concat(finalX));
          r = Math.random() * (180 - -180) + -180;
          forceX = 0;
          forceY = 0;
          TO_RADIANS = Math.PI / 180;

          this.update = function () {
            var distance, dx, dy, powerX, powerY, x0, x1, y0, y1;
            x0 = x;
            y0 = y;
            x1 = mouse.x;
            y1 = mouse.y;
            dx = x1 - x0;
            dy = y1 - y0;
            distance = Math.sqrt(dx * dx + dy * dy);
            powerX = x0 - dx / distance * magnet / distance;
            powerY = y0 - dy / distance * magnet / distance;
            forceX = (forceX + (finalX - x0) / 2) / 2.1;
            forceY = (forceY + (finalY - y0) / 2) / 2.2;
            x = powerX + forceX;
            y = powerY + forceY;
          };

          this.draw = function () {
            return rotateAndPaintImage(ctx, img, r * TO_RADIANS, x, y, w / 2, h / 2, w, h);
          };
        };

        rotateAndPaintImage = function rotateAndPaintImage(context, image, angle, positionX, positionY, axisX, axisY, widthX, widthY) {
          context.translate(positionX, positionY);
          context.rotate(angle);
          context.drawImage(image, -axisX, -axisY, widthX, widthY);
          context.rotate(-angle);
          return context.translate(-positionX, -positionY);
        };

        _render = function render() {
          var x, y;
          x = 0;
          y = 0;
          ctx.clearRect(0, 0, width, height);

          while (y < grids.length) {
            grids[y].draw();
            y++;
          }

          while (x < imgs.length) {
            imgs[x].update();
            imgs[x].draw();
            x++;
          }

          return requestAnimationFrame(_render);
        };

        init();
      }).call(this);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.excuteEffect();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$dataImage = this.props.dataImage,
          dataImage = _this$props$dataImage === void 0 ? 'http://unsplash.it/g/450/200/?random=1' : _this$props$dataImage;
      return _react["default"].createElement("div", {
        className: this.props.className || ''
      }, _react["default"].createElement(_mosaicStyled.Mosaic, null, _react["default"].createElement("canvas", {
        id: "canvas",
        "data-image": dataImage
      }), _react["default"].createElement("div", {
        className: "intro"
      })));
    }
  }]);

  return MosaicGround;
}(_react.PureComponent);

var _default = MosaicGround;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,