"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = _interopRequireDefault(require("lodash"));

var _jquery = _interopRequireDefault(require("jquery"));

var _sketch2 = require("./sketch");

var _buildingStyled = require("./buildingStyled");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var CrossBuildingEffect =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(CrossBuildingEffect, _PureComponent);

  function CrossBuildingEffect(props) {
    var _this;

    _classCallCheck(this, CrossBuildingEffect);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(CrossBuildingEffect).call(this, props));
    _this.excuteEffect = _this.excuteEffect.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(CrossBuildingEffect, [{
    key: "excuteEffect",
    value: function excuteEffect() {
      (function () {
        var Building, Skyline, dt, sketch, skylines;

        var _sketch = (0, _sketch2.getSketch)(window, _sketch2.sketchFactory);

        if (!sketch) {
          _sketch = window.Sketch;
        }

        sketch = _sketch.create();
        sketch.mouse.x = sketch.width / 10;
        sketch.mouse.y = sketch.height;
        skylines = [];
        dt = 1; // BUILDINGS

        Building = function Building(config) {
          return this.reset(config);
        };

        Building.prototype.reset = function (config) {
          this.layer = config.layer;
          this.x = config.x;
          this.y = config.y;
          this.width = config.width;
          this.height = config.height;
          this.color = config.color;
          this.slantedTop = Math.floor(Math.random(0, 10)) === 0;
          this.slantedTopHeight = this.width / Math.random(2, 4);
          this.slantedTopDirection = Math.round(Math.random(0, 1)) === 0;
          this.spireTop = Math.floor(Math.random(0, 15)) === 0;
          this.spireTopWidth = Math.random(this.width * .01, this.width * .07);
          this.spireTopHeight = Math.random(10, 20);
          this.antennaTop = !this.spireTop && Math.floor(Math.random(0, 10)) === 0;
          this.antennaTopWidth = this.layer / 2;
          return this.antennaTopHeight = Math.random(5, 20);
        };

        Building.prototype.render = function () {
          sketch.fillStyle = sketch.strokeStyle = this.color;
          sketch.lineWidth = 2;
          sketch.beginPath();
          sketch.rect(this.x, this.y, this.width, this.height);
          sketch.fill();
          sketch.stroke();

          if (this.slantedTop) {
            sketch.beginPath();
            sketch.moveTo(this.x, this.y);
            sketch.lineTo(this.x + this.width, this.y);

            if (this.slantedTopDirection) {
              sketch.lineTo(this.x + this.width, this.y - this.slantedTopHeight);
            } else {
              sketch.lineTo(this.x, this.y - this.slantedTopHeight);
            }

            sketch.closePath();
            sketch.fill();
            sketch.stroke();
          }

          if (this.spireTop) {
            sketch.beginPath();
            sketch.moveTo(this.x + this.width / 2, this.y - this.spireTopHeight);
            sketch.lineTo(this.x + this.width / 2 + this.spireTopWidth, this.y);
            sketch.lineTo(this.x + this.width / 2 - this.spireTopWidth, this.y);
            sketch.closePath();
            sketch.fill();
            sketch.stroke();
          }

          if (this.antennaTop) {
            sketch.beginPath();
            sketch.moveTo(this.x + this.width / 2, this.y - this.antennaTopHeight);
            sketch.lineTo(this.x + this.width / 2, this.y);
            sketch.lineWidth = this.antennaTopWidth;
            return sketch.stroke();
          }
        }; // SKYLINES


        Skyline = function Skyline(config) {
          this.x = 0;
          this.buildings = [];
          this.layer = config.layer;
          this.width = {
            min: config.width.min,
            max: config.width.max
          };
          this.height = {
            min: config.height.min,
            max: config.height.max
          };
          this.speed = config.speed;
          this.color = config.color;
          this.populate();
          return this;
        };

        Skyline.prototype.populate = function () {
          var newHeight, newWidth, results, totalWidth;
          totalWidth = 0;
          results = [];

          while (totalWidth <= sketch.width + this.width.max * 2) {
            if (window.CP.shouldStopExecution(0)) break;
            newWidth = Math.round(Math.random(this.width.min, this.width.max));
            newHeight = Math.round(Math.random(this.height.min, this.height.max));
            this.buildings.push(new Building({
              layer: this.layer,
              x: this.buildings.length === 0 ? 0 : this.buildings[this.buildings.length - 1].x + this.buildings[this.buildings.length - 1].width,
              y: sketch.height - newHeight,
              width: newWidth,
              height: newHeight,
              color: this.color
            }));
            results.push(totalWidth += newWidth);
          }

          window.CP.exitedLoop(0);
          return results;
        };

        Skyline.prototype.update = function () {
          var firstBuilding, lastBuilding, newHeight, newWidth;
          this.x -= sketch.mouse.x * this.speed * dt;
          firstBuilding = this.buildings[0];

          if (firstBuilding.width + firstBuilding.x + this.x < 0) {
            newWidth = Math.round(Math.random(this.width.min, this.width.max));
            newHeight = Math.round(Math.random(this.height.min, this.height.max));
            lastBuilding = this.buildings[this.buildings.length - 1];
            firstBuilding.reset({
              layer: this.layer,
              x: lastBuilding.x + lastBuilding.width,
              y: sketch.height - newHeight,
              width: newWidth,
              height: newHeight,
              color: this.color
            });
            return this.buildings.push(this.buildings.shift());
          }
        };

        Skyline.prototype.render = function () {
          var i;
          i = this.buildings.length;
          sketch.save();
          sketch.translate(this.x, (sketch.height - sketch.mouse.y) / 20 * this.layer);

          while (i--) {
            if (window.CP.shouldStopExecution(1)) break;
            this.buildings[i].render(i);
          }

          window.CP.exitedLoop(1);
          return sketch.restore();
        }; // SETUP


        sketch.setup = function () {
          var i, results;
          i = 5;
          results = [];

          while (i--) {
            if (window.CP.shouldStopExecution(2)) break;
            results.push(skylines.push(new Skyline({
              layer: i + 1,
              width: {
                min: (i + 1) * 30,
                max: (i + 1) * 40
              },
              height: {
                min: 150 - i * 35,
                max: 300 - i * 35
              },
              speed: (i + 1) * .003,
              color: 'hsl( 200, ' + ((i + 1) * 1 + 10) + '%, ' + (75 - i * 13) + '% )'
            })));
          }

          window.CP.exitedLoop(2);
          return results;
        }; // CLEAR


        sketch.clear = function () {
          return sketch.clearRect(0, 0, sketch.width, sketch.height);
        }; // UPDATE


        sketch.update = function () {
          var i, results;
          dt = sketch.dt < .1 ? .1 : sketch.dt / 16;
          dt = dt > 5 ? 5 : dt;
          i = skylines.length;
          results = [];

          while (i--) {
            if (window.CP.shouldStopExecution(3)) break;
            results.push(skylines[i].update(i));
          }

          window.CP.exitedLoop(3);
          return results;
        }; // DRAW


        sketch.draw = function () {
          var i, results;
          i = skylines.length;
          results = [];

          while (i--) {
            if (window.CP.shouldStopExecution(4)) break;
            results.push(skylines[i].render(i));
          }

          window.CP.exitedLoop(4);
          return results;
        }; // Mousemove Fix


        (0, _jquery["default"])(window).on('mousemove', function (e) {
          sketch.mouse.x = e.pageX;
          return sketch.mouse.y = e.pageY;
        });
      }).call(this); //# sourceURL=coffeescript
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this.excuteEffect();
    }
  }, {
    key: "render",
    value: function render() {
      return _react["default"].createElement("div", {
        className: this.props.className || ''
      }, _react["default"].createElement(_buildingStyled.Building, null));
    }
  }]);

  return CrossBuildingEffect;
}(_react.PureComponent);

var _default = CrossBuildingEffect;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,